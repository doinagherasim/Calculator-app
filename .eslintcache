[{"/Users/doina/Desktop/COD/my projects/Calculator/src/index.js":"1","/Users/doina/Desktop/COD/my projects/Calculator/src/App.js":"2","/Users/doina/Desktop/COD/my projects/Calculator/src/Calculator/Calculator.js":"3"},{"size":142,"mtime":1674471993038,"results":"4","hashOfConfig":"5"},{"size":148,"mtime":1674471127157,"results":"6","hashOfConfig":"5"},{"size":7151,"mtime":1674471272294,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6ot7k8",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/doina/Desktop/COD/my projects/Calculator/src/index.js",[],"/Users/doina/Desktop/COD/my projects/Calculator/src/App.js",[],["16","17"],"/Users/doina/Desktop/COD/my projects/Calculator/src/Calculator/Calculator.js",["18"],"import React from \"react\";\nimport classes from \"./calculator.css\";\nimport {useState} from \"react\";\n\nfunction Calculator() {\n  const math = require(\"mathjs\");\n    // 1. Declare state variables\n    // Declare state variables to store the value and the previous operator\n  const [value, setValue] = useState([]);\n  const [prevOperator, setPrevOperator] = useState(\"\");\n\n  const operatorsTop = [\"DEL\",\"C\", \"+/-\", \"%\"];\n  const digits =[ 7, 8, 9, 4, 5, 6, 1, 2, 3];\n  const operatorsRight = [\"/\",\"*\",\"-\",\"+\"];\n  const operatorsBottom = [0, \".\",\"=\"];\n\n  const [storedValue, setStoredValue] = useState([]);\n  const [dotCounter, setDotCounter] = useState(0);\n  const [prevValue, setPrevValue] = useState([]);\n  const [minus, setMinus] =useState(false);\n  const [valueLenght, setValueLenght] = useState(0);\n  \n    \n    // 2. clickHndler for each digit\n    const clickHandler = (digit) => {\n\n    const operators = [\"+\", \"-\", \"*\", \"/\",\"%\"];  // Array of operators\n\n    if (operators.includes(prevOperator) && operators.includes(digit)) {\n      setValue([...prevValue,digit]);\n      setStoredValue(value);\n        return;  // Do not allow the user to enter two or more operators one after another\n      }\n        else if ((operatorsTop.includes(digit) ||  operatorsRight.includes(digit) || digit === 0)\n        && value.length === 0){\n        setValue([]); // do not allow user to enter operators if there is no digits\n       } \n       else if((digits.includes(digit) || digit === 0)){   \n          setValue([...value, digit]); // return the digit value if it is a number\n          setPrevOperator(digit);\n          setStoredValue(value);}\n       else if(operators.includes(digit)){\n        if(digit === \"-\"){\n        setMinus(true);\n        setDotCounter(0);\n        }\n        if(digit === \"+\" || digit === \"/\" || digit === \"*\") {\n          setMinus(false);\n          setDotCounter(0);\n        }\n        setValue([...value, digit]);\n        setPrevOperator(digit);\n        setPrevValue([...value]);\n        setStoredValue([...value]);\n        return;\n       }\n\n    // DELETE button   \n    if (digit === \"DEL\"){\n      setValue(value.slice(0,-1));\n      setStoredValue(value.slice(0,-1));\n      setDotCounter(0);\n    } \n\n     // CLEAR button\n     if(digit === \"C\" && value.length > 0){\n      window.location.reload();\n     }\n\n    // PLUS/MINUS operator \n    if (digit === \"+/-\") {\n      const operatorsArray = [\"+\",\"*\", \"/\",\"%\"];\n      const hasOperator = value.some(el => operatorsArray.includes(el));\n      const lastOperatorIndex = value.slice().reverse().findIndex(el => operatorsArray.includes(el));\n      const operatorIndex = value.length - lastOperatorIndex-1; // index of the operator\n      const nextIndex = operatorIndex + 1; // next index after operator\n      if(hasOperator) {\n        if( (value[nextIndex] !== \"-\" && minus === false)) {\n        value.splice(nextIndex,0,\"-\");\n        setValue([...value]);\n        setStoredValue(value);\n        }\n       else if(value[nextIndex] === \"-\" && minus === false){\n        value.splice(nextIndex,1);\n        setValue(value);\n        setStoredValue(value);\n      } else if(value[nextIndex] === \"-\" && minus === true) {\n        return;\n      }\n      } \n      else if(!hasOperator) {\n            if(value[0] !== \"-\") {\n              setPrevValue(value);\n              setValue([\"-\", ...value]);\n              } else if (value[0] === \"-\"){\n                setValue(prevValue);\n              }          \n      }\n    }\n    \n     // DOT operator \".\"\n    if (digit === \".\") {\n      let counter = dotCounter;\n      counter++; // Increment the dot counter if the user clicks on the \".\" button\n      setDotCounter(counter); \n      if(dotCounter === 0) {\n        if(value.length === 0) {\n          setValue([0,...value, digit]);\n        } else {\n          setValue([...value, digit]);\n        }\n        } else {\n          return;\n      }\n    }\n    \n     // EQUAL button - \"=\" and Calculation\n    if (digit === \"=\" && value.length >1) { \n      let operation = value.join(\"\");\n      const calcResult = math.evaluate(operation);\n            setValue([calcResult]);  \n            setStoredValue(operation); \n          if (digit === \"=\" && value.length === 0) {\n            setValue([]);  // Do not allow the user to press \"=\" if there are no values in the array\n          } \n          else if (digit === \"=\" && value.length === 1) {\n            setValue(value);\n            setStoredValue(value);\n            return;\n          }\n        };\n        console.log(\"vallen\", valueLenght);\n        if (value.length > 18){\n          setValueLenght(18);\n        } if (value.length > 32){\n          setValueLenght(32);\n        } if (value.length > 45)\n          setValueLenght(45);\n      };\n   \n   return (\n        <div className=\"container\">\n            <div className=\"calculator_container\">\n                <div className=\"screen_container\">\n                    <p className={valueLenght < 18 \n                    ? \"stored screen2\" : valueLenght >= 18 && valueLenght < 32 \n                    ? \"stored screen3\" : valueLenght >= 32 && valueLenght < 42\n                    ? \"stored screen4\" : \"stored screen5\"}>{storedValue}</p>\n                    <p className={valueLenght < 18 \n                    ? \"screen screen1\" : valueLenght >= 18 && valueLenght < 32\n                    ? \"screen screen2\" : valueLenght >= 32 && valueLenght < 42\n                    ? \"screen screen3\" : \"screen screen4\"\n                  } >{value}</p></div>\n\n                <div className=\"buttonBox buttonBoxTop\">{\n                    operatorsTop.map((element, index)=>\n                    <button className={(element === \"DEL\" || element === \"C\") \n                    ? \"button del\" : \"button btnGrey\"} key={index} \n                    onClick={()=>{clickHandler(element);}}>\n                        <p className=\"text\">{element}</p></button>\n                    )}\n                </div>\n\n                <div className=\"container2\">\n                  <div className=\"buttonBox buttonBoxDigits\">{\n                    digits.map((element, index)=>\n                    <button className=\"button\" key={index} onClick={()=> {clickHandler(element);}}>\n                        <p className=\"text\">{element}</p></button>)}   \n                  </div>\n\n                  <div className=\"buttonBox buttonBoxBottom\">{\n                    operatorsBottom.map((element, index)=>\n                    <button className={element === \"=\" ? \"button equal\" : \"button\"} key={index} \n                    onClick={()=> {clickHandler(element);}}>\n                        <p className=\"text\">{element}</p></button>\n                    )}\n                  </div>\n                </div>\n                <div className=\"buttonBox buttonBoxRight\">{\n                    operatorsRight.map((element, index)=>\n                    <button className={\"button btnGrey\"} key={index} \n                    onClick={()=> {clickHandler(element);}}>\n                        <p className={element === \"*\" ? \"asterisk\" : \"text\"}>{element}</p></button>\n                    )}\n                  </div>\n                </div>\n            </div>\n          );\n};\n\nexport default Calculator;",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":2,"column":8,"nodeType":"25","messageId":"26","endLine":2,"endColumn":15},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'classes' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]